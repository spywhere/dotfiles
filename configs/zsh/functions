#!/bin/bash
_docker-run() {
  if tty -s; then
    docker run -it --rm $@
  else
    docker run -i --rm $@
  fi
}

_try-docker-run() {
  local imageName="$1"
  local buildPath="$2"
  shift
  shift
  if test "$(docker images -q "$imageName")" = ""; then
    docker build -t "$imageName" "$buildPath"
  fi
  _docker-run $@
}

_try-cmd() {
  local cmd="$1"
  shift
  if test ${+commands[$cmd]} -eq 1; then
    ${commands[$cmd]} $@
    return 0
  fi
  return 1
}

flashlight() {
  local duration=10
  if test $# -gt 0; then
    duration="$1"
  fi
  printf "$(tput setab 7)$(tput clear)" && sleep $duration
}

keep() {
  if test $# -eq 0; then
    echo -e "No arguments specified. usage:\necho keep /tmp/test.md\ncat /tmp/test.md | keep test.md"
    return 1
  fi
  tmpfile=$(mktemp -t transferXXX);
  if tty -s; then
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
    curl --progress-bar --upload-file "$1" "https://free.keep.sh/$basefile" >> $tmpfile
  else
    curl --progress-bar --upload-file "-" "https://free.keep.sh/$1" >> $tmpfile
  fi
  cat $tmpfile
  rm -f $tmpfile
}

# Transfer.sh will not be available after October 2020
transfer() {
  if test $# -eq 0; then
    echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
    return 1
  fi
  tmpfile=$(mktemp -t transferXXX);
  if tty -s; then
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
    curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile
  else
    curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile
  fi
  cat $tmpfile
  rm -f $tmpfile
}

map() {
  if test `command -v npx`; then
    npx mapscii
    return
  fi
  docker info >/dev/null 2>&1
  if test $? -eq 0; then
    docker run -it --rm --name map-cli node:lts-alpine npx mapscii
    return
  fi
  if test `command -v telnet`; then
    telnet mapscii.me
  fi
}

_run-docker-graphviz() {
  local cmd="$1"
  shift
  _try-docker-run graphviz:latest ${HOME}/$DOTFILES_NAME/docker/graphviz --name graphviz -v $(pwd):/data --entrypoint $cmd graphviz $@
}

dot() {
  if _try-cmd dot $@; then
    return $?
  fi
  _run-docker-graphviz dot $@
}

neato() {
  if _try-cmd neato $@; then
    return $?
  fi
  _run-docker-graphviz neato $@
}

neomutt() {
  if _try-cmd neomutt $@; then
    return $?
  fi
  _try-docker-run neomutt:latest ${HOME}/$DOTFILES_NAME/docker/neomutt --name neomutt -v ${HOME}/$DOTFILES_NAME/binaries/passmgr:/usr/bin/passmgr -v ${HOME}/.cache/neomutt:/root/.cache/neomutt -v ${HOME}/.config/neomutt:/root/.config/neomutt -v ${HOME}/.config/neomutt/accounts/default:/root/.config/neomutt/accounts/default -v ${HOME}/.secret:/root/.secret neomutt $@
}

doctl() {
  if _try-cmd doctl $@; then
    return $?
  fi
  local dockerConfigPath="$(printf "%s" ~)/.docker/config.json"
  _docker-run -e "DIGITALOCEAN_ACCESS_TOKEN=$DIGITALOCEAN_ACCESS_TOKEN" -v "$dockerConfigPath":/root/.docker/config.json -v ~/.ssh/id_rsa:/root/.ssh/id_rsa -v ~/.ssh/id_rsa.pub:/root/.ssh/id_rsa.pub digitalocean/doctl $@
}

mmdc() {
  if _try-cmd mmdc $@; then
    return $?
  fi
  _docker-run -v $(pwd):/data minlag/mermaid-cli $@
}

slack-term() {
  if _try-cmd slack-term $@; then
    return $?
  fi
  _docker-run --name slack-term -v ${HOME}/.config/slack-term/config:/config erroneousboat/slack-term $@
}

rebuild-neovim() {
  local workdir="$(pwd)"
  local clean=""
  local tmpdir="$(mktemp -d)"
  if test "$#" -eq 0; then
    clean="yes"
    git clone --depth 1 https://github.com/neovim/neovim "$tmpdir"
  else
    tmpdir="$1"
  fi
  if test ! -d "$tmpdir"; then
    printf "Directory is not exists: %s\n" "$tmpdir"
    return 1
  fi
  cd "$tmpdir"
  make CMAKE_BUILD_TYPE=Release
  sudo make install
  if test -n "$clean"; then
    sudo rm -rf "$tmpdir"
  fi

  cd "$workdir"
}

rebuild-mosh() {
  local workdir="$(pwd)"
  local clean=""
  local tmpdir="$(mktemp -d)"
  if test "$#" -eq 0; then
    clean="yes"
    git clone --depth 1 https://github.com/mobile-shell/mosh "$tmpdir"
  else
    tmpdir="$1"
  fi
  if test ! -d "$tmpdir"; then
    printf "Directory is not exists: %s\n" "$tmpdir"
    return 1
  fi
  cd "$tmpdir"
  ./autogen.sh
  ./configure
  make
  sudo make install
  if test -n "$clean"; then
    sudo rm -rf "$tmpdir"
  fi

  cd "$workdir"
}

_gh_api() {
  local method="$1"
  shift
  local host="$1"
  shift
  if test -z "$host"; then
    gh api -X $method $@ 2>/dev/null
  else
    gh api -X $method --hostname $host $@ 2>/dev/null
  fi
}

search_github() {
  local host=""
  while test "$1" != ""; do
    local param="$1"
    case $param in
      -H | --hostname)
        shift
        if test -z "$1"; then
          echo "ERROR: hostname is required"
          return 1
        fi
        host="$1"
        ;;
      *)
        break
        ;;
    esac
    shift
  done

  local query="$@"
  if test -z "$query"; then
    echo "usage: $0 [flag]... <query>"
    echo
    echo "Search GitHub for issues/prs using specified query"
    echo
    echo "flags:"
    echo "  --hostname, -H <hostname>    Set GitHub host (default to github.com)"
    return 1
  fi
  _gh_api GET "$host" /search/issues -f q="$query" -q '.items[]'
}

_is_number() {
  case $@ in
    '' | *[!0-9]*)
      return 1
      ;;
    *)
      return 0
      ;;
  esac
}

_label_operation() {
  local operation="$1"
  shift

  local host=""
  local dry=""
  local labels=""
  # process labels
  while test "$1" != ""; do
    local label="$1"
    shift
    if test "$label" = "--dry"; then
      dry="yes"
      continue
    elif test "$label" = "-H" -o "$label" = "--hostname"; then
      if test -z "$1"; then
        echo "ERROR: hostname is required"
        return 1
      fi
      host="$1"
      shift
      continue
    elif test "$label" = "--"; then
      break
    fi
    if test -z "$labels"; then
      labels=$label
    else
      labels=$(printf "%s\0%s" "$labels" "$label")
    fi
  done

  if test -z "$labels"; then
    echo "usage: $0 [flag]... <label name>... -- [issue/pr number]..."
    echo
    echo "flags:"
    echo "  --dry                      Show the action that will be perform"
    echo "  --hostname, H <hostname>   Set GitHub host (default to github.com)"
    echo "  --                         Stop processing labels and start processing issue/pr numbers"
    return 1
  fi

  if test -z "$1"; then
    # process issue numbers from stdin
    while IFS= read -r issue; do
      "$operation" "$dry" "$host" "$issue" "$labels"
    done
    return 0
  fi

  # process issue numbers from arguments
  while test "$1" != ""; do
    "$operation" "$dry" "$host" "$1" "$labels"
    shift
  done
}

apply_label() {
  apply_label_to_issue() {
    local dry="$1"
    shift
    local host="$1"
    shift
    local issue="$1"
    shift
    local labels="\"$(echo "$@" | sed 's/\x0/", "/g')\""

    printf "Applying label $labels to issue #$issue..."
    if ! _is_number $issue; then
      printf " fail\nERROR: Issue \"%s\" is not a valid number\n" "$issue"
      return
    fi

    local response=""
    if test -z "$dry"; then
      response=$(printf '{"labels": [%s]}' "$labels" | _gh_api POST "$host" /repos/:owner/:repo/issues/$issue/labels --input -)
    fi
    if test $? -eq 0; then
      printf " done\n"
    else
      printf " fail\n"
      printf "%s\n" "$response"
    fi
  }

  _label_operation apply_label_to_issue $@
}

remove_label() {
  remove_label_from_issue() {
    local dry="$1"
    shift
    local host="$1"
    shift
    local issue="$1"
    shift
    local labels="$@"

    while read -r label; do
      printf "Removing label \"$label\" from issue #$issue..."
      if ! _is_number $issue; then
        printf " fail\nERROR: Issue \"%s\" is not a valid number\n" "$issue"
        continue
      fi

      local response=""
      if test -z "$dry"; then
        response=$(_gh_api DELETE "$host" "/repos/:owner/:repo/issues/$issue/labels/$(printf "%s" "$label" | jq -sRr @uri)")
      fi
      if test $? -eq 0; then
        printf " done\n"
      else
        printf " fail\n"
        printf "%s\n" "$response"
      fi
    done <<< $(echo $labels | xargs -d'\0' -n1)
  }

  _label_operation remove_label_from_issue $@
}
