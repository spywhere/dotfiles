#!/bin/zsh

keep() {
  if test $# -eq 0; then
    echo -e "No arguments specified. usage:\necho keep /tmp/test.md\ncat /tmp/test.md | keep test.md"
    return 1
  fi
  tmpfile=$(mktemp -t transferXXX);
  if tty -s; then
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
    curl --progress-bar --upload-file "$1" "https://free.keep.sh/$basefile" >> $tmpfile
  else
    curl --progress-bar --upload-file "-" "https://free.keep.sh/$1" >> $tmpfile
  fi
  cat $tmpfile
  rm -f $tmpfile
}

# Transfer.sh will not be available after October 2020
transfer() {
  if test $# -eq 0; then
    echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
    return 1
  fi
  tmpfile=$(mktemp -t transferXXX);
  if tty -s; then
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
    curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile
  else
    curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile
  fi
  cat $tmpfile
  rm -f $tmpfile
}

map() {
  if test `command -v npx`; then
    npx mapscii
    return
  fi
  docker info >/dev/null 2>&1
  if test $? -eq 0; then
    docker run -it --rm --name map-cli node:lts-alpine npx mapscii
    return
  fi
  if test `command -v telnet`; then
    telnet mapscii.me
  fi
}

url_to() {
  local url=""
  read url

  local protocol='ssh'
  local separator=':'

  if printf '%s' "$url" | grep -q '://'; then
    protocol="$(printf '%s' "$url" | cut -d':' -f1)"
    # remove protocol
    url="$(printf '%s' "$url" | cut -d'/' -f3-)"
    separator='/'
  fi

  local domain="$(printf '%s' "$url" | cut -d "$separator" -f1)"
  local url_path="$(printf '%s' "$url" | cut -d "$separator" -f2-)"
  local git_path="$(printf '%s' "$url_path" | sed 's/.git$//g')"
  local user=''

  if printf '%s' "$domain" | grep -q '@'; then
    user="$(printf '%s' "$domain" | cut -d'@' -f1)"
    domain="$(printf '%s' "$domain" | cut -d'@' -f2)"
  fi

  local default_output=""
  if test "$protocol" = 'ssh'; then
    default_output='https'
  else
    default_output='ssh'
  fi

  while test -n "$1" || test -n "$default_output"; do
    if test "$1" = "github.com" || test "$1" = "github" || test "$1" = "gh"; then
      printf 'git@%s' "github.com:$git_path.git"
    elif test "$1" = "sr.ht" || test "$1" = "srht"; then
      printf 'git@%s' "git.sr.ht:~$git_path"
    elif test "$1" = "ssh" || test "$default_output" = "ssh"; then
      if test -n "$user"; then
        printf '%s@' "$user"
      fi

      printf '%s:%s' "$domain" "$url_path"
    elif test "$1" = "http" || test "$1" = "https" || test "$default_output" = "https"; then
      if test -n "$1"; then
        printf '%s://' "$1"
      else
        printf '%s://' "$default_output"
      fi
      if test -n "$user"; then
        printf '%s@' "$user"
      fi

      printf '%s/%s' "$domain" "$url_path"
    fi

    printf '\n'

    if test -n "$1"; then
      shift
    fi
    default_output=''
  done
}

TMATE_SOCKET='/tmp/tmate-pair.sock'
pair() {
  local current_session="$(tmux display-message -p '#S')"
  local session_name="$(whoami)-pair"

  if test -n "$1"; then
    session_name="$1"
  fi

  if tmate -S "$TMATE_SOCKET" has-session -t "tmate-$session_name" >/dev/null 2>&1; then
    echo 'Existing pairing session found, unpairing...'
    unpair
  fi
  if tmux has-session -t "$session_name" >/dev/null 2>&1; then
    echo 'Existing pairing session found, unpairing...'
    unpair "$session_name"
  fi

  local autodestroy="$(tmux show-options -qgv destroy-unattached)"
  if test "$autodestroy" = 'on'; then
    echo 'Turning off auto destroy for unattached sessions...'
    tmux set -g @tmux-pair-auto-destroy on
    tmux set -g destroy-unattached off
  fi

  echo 'Creating a new pairing session...'
  tmux new-session -d -s "$session_name" "unset TMUX && tmate -S '$TMATE_SOCKET' -f '$HOME/.dots/configs/tmate/tmate-pair.conf' new-session -s 'tmate-$session_name' 'unset TMUX && tmux attach-session -t $current_session'"

  echo 'Waiting for connection...'
  while ! tmate -S "$TMATE_SOCKET" wait tmate-ready >/dev/null 2>&1; do
    sleep 1
  done
  tmate -S "$TMATE_SOCKET" send-keys -t "tmate-$session_name" q
  echo "  Web:" "$(tmate -S "$TMATE_SOCKET" display -p '#{tmate_web}')"
  echo "  Web Read-Only:" "$(tmate -S "$TMATE_SOCKET" display -p '#{tmate_web_ro}')"
  echo "  SSH:" "$(tmate -S "$TMATE_SOCKET" display -p '#{tmate_ssh}')"
  echo "  SSH Read-Only:" "$(tmate -S "$TMATE_SOCKET" display -p '#{tmate_ssh_ro}')"
}

unpair() {
  local session_name="$(whoami)-pair"

  if test -n "$1"; then
    session_name="$1"
  fi

  if tmate -S "$TMATE_SOCKET" has-session -t "tmate-$session_name" >/dev/null 2>&1; then
    tmate -S "$TMATE_SOCKET" kill-session -t "tmate-$session_name"
  fi
  if tmux has-session -t "$session_name" >/dev/null 2>&1; then
    tmux kill-session -t "$session_name"
  fi

  local autodestroy="$(tmux show-options -qgv @tmux-pair-auto-destroy)"
  if test "$autodestroy" = 'on'; then
    tmux set -g destroy-unattached on
  fi

  tmux set -gu @tmux-pair-auto-destroy
}
