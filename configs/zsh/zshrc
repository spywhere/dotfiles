#!/bin/zsh
alias recovery="if test -f ~/recovery; then rm -f ~/recovery && echo 'Recovery mode disabled'; else touch ~/recovery && echo 'Recovery mode enabled'; fi"
alias tmux-recovery="if test -f ~/tmux-recovery; then rm -f ~/tmux-recovery && echo 'Tmux recovery mode disabled'; else touch ~/tmux-recovery && echo 'Tmux recovery mode enabled'; fi"
if test -f ~/recovery; then
  return
fi
DOTFILES_NAME=.dots

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

if ! test -f ~/.zinit/bin/zinit.zsh; then
  echo "Installing zinit..."
  mkdir -p ~/.zinit
  git clone https://github.com/zdharma-continuum/zinit ~/.zinit/bin
fi

source ~/.zinit/bin/zinit.zsh

autoload -Uz compinit
autoload -Uz bashcompinit && bashcompinit
typeset -i updated_at=$(date +'%j' -r ~/.zcompdump 2>/dev/null || stat -f '%Sm' -t '%j' ~/.zcompdump 2>/dev/null)
if test $(date +'%j') != $updated_at; then
  compinit -i
else
  compinit -C -i
fi
autoload -Uz add-zsh-hook

setopt append_history # append history list to history file, rather than replace it
setopt hist_ignore_dups # don't record a command that just run
setopt hist_save_no_dups # don't save duplicate entries to history file
setopt hist_ignore_all_dups # remove older duplicate entries from history
setopt hist_reduce_blanks # remove superfluous blanks from history items
setopt hist_ignore_space # skip command with leading space
setopt share_history # share history between different instances of the shell

setopt auto_cd # cd by typing directory name if it's not a command
setopt correct # autocorrect commands

setopt auto_list # automatically list choices on ambiguous completion
setopt auto_menu # automatically use menu completion
setopt always_to_end # move cursor to end if word had one match
setopt complete_in_word # allow completion from within a word/phrase

setopt ignore_eof # don't trigger logout / exit on C-d
bindkey '^D' end-of-line

zstyle ':completion:*' menu select # select completions with arrow keys
zstyle ':completion:*' group-name '' # group results by category
zstyle ':completion:::::' completer _expand _complete _ignored _approximate # enable approximate matches for completion
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' accept-exact '*(N)' # Speedup path completion

# Cache expensive completions
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zsh

ZSH_TMUX_AUTOSTART=true
ZSH_TMUX_AUTOCONNECT=false
ZSH_TMUX_UNICODE=true

# Workaround for tmux with zinit: https://github.com/zdharma-continuum/zinit/issues/503
ZSH_TMUX_FIXTERM=false

# early set the variables for terminal and tmux to use
. $HOME/$DOTFILES_NAME/configs/zsh/setup

if test ! -f ~/.no-starship -a -n "$(command -v starship)"; then
  USE_STARSHIP=true
else
  USE_STARSHIP=false
fi

# ZSH_AUTOSUGGEST_STRATEGY=(openai)
#
# _zsh_autosuggest_strategy_openai() {
# 	# Reset options to defaults and enable LOCAL_OPTIONS
# 	emulate -L zsh
#
# 	# Escape backslashes and all of the glob operators so we can use
# 	# this string as a pattern to search the $history associative array.
# 	# - (#m) globbing flag enables setting references for match data
# 	# TODO: Use (b) flag when we can drop support for zsh older than v5.0.8
# 	local prefix="${1//(#m)[\\*?[\]<>()|^~#]/\\$MATCH}"
#
# 	# Get the history items that match the prefix, excluding those that match
# 	# the ignore pattern
# 	local pattern="$prefix"
# 	typeset -g suggestion="$pattern from openai"
# }

zinit snippet OMZP::brew

if test -z "$VIM" && test -z "$TMUX" && test -z "$TERM_PROGRAM" && test ! -f ~/no-tmux; then
  zinit ice lucid wait"0"
  zinit snippet OMZ::plugins/tmux
else
  if ! $USE_STARSHIP; then
    zinit ice lucid depth"1"
    zinit light romkatv/powerlevel10k

    zinit light romkatv/gitstatus
  fi

  zinit light michaelaquilina/zsh-you-should-use
  zinit light aloxaf/fzf-tab
  zinit ice lucid depth"1" as"program" pick"bin/git-fuzzy"
  zinit light bigH/git-fuzzy

  zinit light zsh-users/zsh-autosuggestions
  zinit ice lucid depth"1" blockf
  zinit light zsh-users/zsh-completions
  zinit light zsh-users/zsh-history-substring-search
  zinit light zdharma-continuum/fast-syntax-highlighting

  zinit snippet OMZP::asdf
  zinit snippet OMZP::common-aliases
  zinit ice lucid as"completion"
  zinit snippet OMZP::docker/completions/_docker
  zinit ice lucid as"completion"
  zinit snippet https://raw.githubusercontent.com/containers/podman/main/completions/zsh/_podman
  zinit snippet OMZL::git.zsh
  zinit snippet OMZP::git
  zinit snippet OMZP::git-auto-fetch
  zinit snippet OMZP::gitignore
  zinit ice lucid as"completion"
  zinit snippet OMZP::httpie/_httpie
  zinit snippet OMZP::npm
fi

if $USE_STARSHIP; then
  # Setup starship
  . <(starship init zsh)
elif test -f $HOME/$DOTFILES_NAME/configs/zsh/p10k; then
  # Setup powerlevel10k
  source $HOME/$DOTFILES_NAME/configs/zsh/p10k
fi

. $HOME/$DOTFILES_NAME/configs/zsh/aliases
. $HOME/$DOTFILES_NAME/configs/zsh/functions
. $HOME/$DOTFILES_NAME/configs/zsh/fuzzy
. $HOME/$DOTFILES_NAME/configs/zsh/variables
. $HOME/$DOTFILES_NAME/configs/zsh/hooks
. $HOME/$DOTFILES_NAME/configs/zsh/preexec

# Use personalize settings if found as well
test -f ~/.personal && source ~/.personal

# Use fzf if found
test -f ~/.fzf.zsh && source ~/.fzf.zsh

# Setup hstr
if test -n "$(command -v hstr)"; then
  setopt histignorespace           # skip cmds w/ leading space from history
  export HSTR_CONFIG=hicolor       # get more colors
  bindkey -s "\C-r" "\C-a hstr -- \C-j"     # bind hstr to Ctrl-r (for Vi mode check doc)
  export HSTR_TIOCSTI=y
fi

# Setup github cli
if test -n "$(command -v gh)"; then
  . <(gh completion -s zsh)
fi

# Setup deno
if test -n "$(command -v deno)" && deno completions bash >/dev/null 2>&1; then
  . <(deno completions bash)
fi
