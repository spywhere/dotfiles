#!/bin/bash

_docker-run() {
  if tty -s; then
    docker run -it --rm $@
  else
    docker run -i --rm $@
  fi
}

_try-docker-run() {
  local imageName="$1"
  local buildPath="$2"
  shift
  shift
  if test "$(docker images -q "$imageName")" = ""; then
    docker build -t "$imageName" "$buildPath"
  fi
  _docker-run $@
}

_docker-daemon() {
  docker run --rm -d $@
}

_try-cmd() {
  local cmd="$1"
  shift
  if test ${+commands[$cmd]} -eq 1; then
    ${commands[$cmd]} $@
    return 0
  fi
  return 1
}

_mysql_image_name="mysql:5.7"
if test "$(arch)" = "armv7l"; then
  # Raspberry Pi variant
  _mysql_image_name="jsurf/rpi-mariadb"
fi

_mysql-run() {
  local cmd="$1"
  shift
  _docker-run --network=host --name mysql-cli $_mysql_image_name $cmd $@
}

mysql() {
  if _try-cmd mysql $@; then
    return
  fi
  _mysql-run mysql $@
}

mysqldump() {
  if _try-cmd mysqldump $@; then
    return
  fi
  _mysql-run mysqldump $@
}

_cli-run() {
  local name="$1"
  local imageName="$2"
  shift
  shift
  _docker-run --name $name-cli -v $(pwd):/opt/app:delegated -w /opt/app $imageName $@
}

_node-run() {
  local cmd="$1"
  shift
  _cli-run $cmd node:lts-alpine $cmd $@
}

countdown() {
  _cli-run countdown golang:alpine sh -c "go get github.com/antonmedv/countdown && countdown $@"
}

node() {
  if _try-cmd node $@; then
    return $?
  fi
  _node-run node $@
}

npm() {
  if _try-cmd npm $@; then
    return $?
  fi
  _node-run npm $@
}

python2() {
  if _try-cmd python2 $@; then
    return $?
  fi
  _cli-run python2 python:2-alpine python $@
}

python3() {
  if _try-cmd python3 $@; then
    return $?
  fi
  _cli-run python3 python:3-alpine python $@
}

terraform() {
  if _try-cmd terraform $@; then
    return $?
  fi
  _cli-run terraform hashicorp/terraform $@
}

sqlite3() {
  if _try-cmd sqlite3 $@; then
    return $?
  fi
  _cli-run sqlite3 nouchka/sqlite3 $@
}

redis-cli() {
  if _try-cmd redis-cli $@; then
    return $?
  fi
  _cli-run redis redis:alpine redis-cli $@
}

mongo() {
  if _try-cmd mongo $@; then
    return $?
  fi
  _cli-run mongo webhippie/mongodb mongo $@
}

browsh() {
  if _try-cmd browsh $@; then
    return $?
  fi
  _docker-run browsh/browsh $@
}

convert() {
  if _try-cmd convert $@; then
    return $?
  fi
  _cli-run imagemagick dpokidov/imagemagick $@
}

consul() {
  if _try-cmd consul $@; then
    return $?
  fi
  _docker-run --network=host --name consul-cli consul $@
}

consul() {
  if _try-cmd consul $@; then
    return $?
  fi
  _docker-run --network=host --name consul-template -v $(pwd):/opt/app -w /opt/app hashicorp/consul-template:alpine consul-template $@
}

_run-docker-graphviz() {
  local cmd="$1"
  shift
  _try-docker-run graphviz:latest ${HOME}/$DOTFILES_NAME/docker/graphviz --name graphviz -v $(pwd):/data --entrypoint $cmd graphviz $@
}

dot() {
  if _try-cmd dot $@; then
    return $?
  fi
  _run-docker-graphviz dot $@
}

neato() {
  if _try-cmd neato $@; then
    return $?
  fi
  _run-docker-graphviz neato $@
}

neomutt() {
  if _try-cmd neomutt $@; then
    return $?
  fi
  _try-docker-run neomutt:latest ${HOME}/$DOTFILES_NAME/docker/neomutt --name neomutt -v ${HOME}/$DOTFILES_NAME/binaries/passmgr:/usr/bin/passmgr -v ${HOME}/.cache/neomutt:/root/.cache/neomutt -v ${HOME}/.config/neomutt:/root/.config/neomutt -v ${HOME}/.config/neomutt/accounts/default:/root/.config/neomutt/accounts/default -v ${HOME}/.secret:/root/.secret neomutt $@
}

doctl() {
  if _try-cmd doctl $@; then
    return $?
  fi
  local dockerConfigPath="$(printf "%s" ~)/.docker/config.json"
  _docker-run -e "DIGITALOCEAN_ACCESS_TOKEN=$DIGITALOCEAN_ACCESS_TOKEN" -v "$dockerConfigPath":/root/.docker/config.json -v ~/.ssh/digitalocean.id_rsa:/root/.ssh/id_rsa -v ~/.ssh/digitalocean.id_rsa.pub:/root/.ssh/id_rsa.pub digitalocean/doctl $@
}

mmdc() {
  if _try-cmd mmdc $@; then
    return $?
  fi
  _docker-run -v $(pwd):/data minlag/mermaid-cli $@
}

slack-term() {
  if _try-cmd slack-term $@; then
    return $?
  fi
  _docker-run --name slack-term -v ${HOME}/.config/slack-term/config:/config erroneousboat/slack-term $@
}

###########################
# Docker version of tools #
###########################
docker-mysql() {
  _docker-daemon -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -v ${HOME}/$DOTFILES_NAME/configs/mysql/data:/var/lib/mysql -v ${HOME}/$DOTFILES_NAME/configs/mysql/config:/etc/mysql/conf.d --name mysql $_mysql_image_name $@
}

docker-mongo() {
  _docker-daemon -p 27017:27017 --name mongo webhippie:mongodb $@
}

docker-redis() {
  _docker-daemon -p 6379:6379 --name redis redis:alpine $@
}

docker-consul() {
  _docker-daemon -p 8500:8500 --name consul consul $@
}
