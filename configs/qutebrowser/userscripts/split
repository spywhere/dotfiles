#!/usr/bin/env bash

SCRIPT_NAME=$(basename "$0")
# create a temporary file for HTML output
TMP_HTML="$(mktemp -p "$(mktemp -d)" XXXXXXXX).html"

if test -z "$QUTE_FIFO"; then
  cmd() {
    printf '%s\n' "$*" >&2
  }
else
  cmd() {
    printf '%s' "$*" >> "$QUTE_FIFO"
  }
fi

print() {
  cmd message-info "\"[$SCRIPT_NAME] $*\""
}

error() {
  cmd message-error "\"[$SCRIPT_NAME] $*\""
}

html() {
  local first
  local second
  local attr
  if test "$1" = "vertical"; then
    first="<"
    second=">"
    attr="v"
  else
    first="^"
    second="v"
    attr="h"
  fi

  printf '<html>'
  printf '<head>'
  printf '<script type="text/javascript">'
  printf 'const titles = ["[%s] %s", "[%s] %s"];' "$first" "$2" "$second" "$3"
  printf 'function cycleTitle() {'
  printf '  document.title = titles[0];'
  printf '  titles.push(titles.shift());'
  printf '}'
  printf 'setInterval(cycleTitle, 3000);'
  printf 'cycleTitle();'
  printf '</script>'
  printf '<style>'
  printf 'body {'
  printf '  margin: 0;'
  printf '  padding: 0;'
  printf '  overflow: hidden;'
  printf '}'
  printf '.overlay {'
  printf '  display: none;'
  printf '  position: absolute;'
  printf '  top: 0;'
  printf '  left: 0;'
  printf '  right: 0;'
  printf '  bottom: 0;'
  printf '  z-index: 1000;'
  printf '}'
  printf 'flex {'
  printf '  display: flex;'
  printf '  height: 100vh;'
  printf '  width: 100vw;'
  printf '}'
  printf 'flex.h {'
  printf '  flex-direction: column;'
  printf '}'
  printf 'flex.v {'
  printf '  flex-direction: row;'
  printf '}'
  printf 'flex-item {'
  printf '  display: flex;'
  printf '  position: relative;'
  printf '  overflow: hidden;'
  printf '  flex: 1;'
  printf '}'
  printf 'iframe {'
  printf '  display: block;'
  printf '  border: none;'
  printf '  height: 100%%;'
  printf '  width: 100%%;'
  printf '}'
  printf 'flex > flex-resizer {'
  printf '  flex: 0 0 4px;'
  printf '  background: #999;'
  printf '  transition: all 0.2s ease;'
  printf '}'
  printf 'flex > flex-resizer:hover, flex > flex-resizer:active {'
  printf '  flex: 0 0 8px;'
  printf '  background: #ccc;'
  printf '}'
  printf 'flex.h > flex-resizer {'
  printf '  cursor: ns-resize;'
  printf '}'
  printf 'flex.v > flex-resizer {'
  printf '  cursor: ew-resize;'
  printf '}'
  printf '</style>'
  printf '</head>'
  printf '<body>'
  printf '<div class="overlay"></div>'
  printf '<flex class="%s">' "$attr"
  printf '<flex-item><iframe src="%s"></iframe></flex-item>' "$2"
  printf '<flex-resizer></flex-resizer>'
  printf '<flex-item><iframe src="%s"></iframe></flex-item>' "$3"
  printf '</flex>'
  printf '<script type="text/javascript">'
  printf 'let lastClick = Date.now();'
  printf 'function resetSize(prevItem, nextItem) {'
  printf '  prevItem.style.flexGrow = null;'
  printf '  nextItem.style.flexGrow = null;'
  printf '}'

  printf 'function setupResizer(event) {'
  printf '  const resizer = event.target;'

  printf '  const flex = resizer.parentElement;'
  printf '  const isHorizontal = flex.classList.contains("h");'

  printf '  const nextItem = resizer.nextElementSibling;'
  printf '  const prevItem = resizer.previousElementSibling;'
  printf '  const overlay = document.querySelector(".overlay");'
  printf '  if (!nextItem || !prevItem || !overlay) return;'

  printf '  if (Date.now() - lastClick < 300) {'
  printf '    resetSize(prevItem, nextItem);'
  printf '    return;'
  printf '  }'
  printf '  lastClick = Date.now();'

  printf '  event.preventDefault();'

  printf '  let prevSize = isHorizontal ? prevItem.offsetHeight : prevItem.offsetWidth;'
  printf '  let nextSize = isHorizontal ? nextItem.offsetHeight : nextItem.offsetWidth;'
  printf '  const sumSize = prevSize + nextSize;'
  printf '  const prevGrow = parseFloat(prevItem.style.flexGrow) || 1;'
  printf '  const nextGrow = parseFloat(nextItem.style.flexGrow) || 1;'
  printf '  const sumGrow = nextGrow + prevGrow;'
  printf '  let lastPos = isHorizontal ? event.clientY : event.clientX;'

  printf '  const onMouseUp = () => {'
  printf '    overlay.removeEventListener("mousemove", onMouseMove);'
  printf '    overlay.removeEventListener("mouseup", onMouseUp);'
  printf '    overlay.style.display = "none";'
  printf '  };'
  printf '  const onMouseMove = (moveEvent) => {'
  printf '    let pos = isHorizontal ? moveEvent.clientY : moveEvent.clientX;'
  printf '    const delta = pos - lastPos;'
  printf '    prevSize += delta;'
  printf '    nextSize -= delta;'
  printf '    if (prevSize < 0) {'
  printf '      nextSize += prevSize;'
  printf '      pos -= prevSize;'
  printf '      prevSize = 0;'
  printf '    }'
  printf '    if (nextSize < 0) {'
  printf '      prevSize += nextSize;'
  printf '      pos += nextSize;'
  printf '      nextSize = 0;'
  printf '    }'
  printf '    const prevGrowNew = sumGrow * (prevSize / sumSize);'
  printf '    const nextGrowNew = sumGrow * (nextSize / sumSize);'
  printf '    prevItem.style.flexGrow = prevGrowNew;'
  printf '    nextItem.style.flexGrow = nextGrowNew;'
  printf '    lastPos = pos;'
  printf '  };'
  printf '  overlay.style.display = "block";'
  printf '  overlay.addEventListener("dblclick", resetSize);'
  printf '  overlay.addEventListener("mousemove", onMouseMove);'
  printf '  overlay.addEventListener("mouseup", onMouseUp);'
  printf '  event.preventDefault();'
  printf '}'
  printf 'document.body.addEventListener("mousedown", (event) => {'
  printf '  if (event.target.tagName === "FLEX-RESIZER") {'
  printf '    setupResizer(event);'
  printf '  }'
  printf '});'
  printf '</script>'
  printf '</body>'
  printf '</html>'
}

split() {
  html "$@" > "$TMP_HTML"
  cmd open "file://$TMP_HTML"
}

expand_url() {
  case "$1" in
    "{}"|"{url}")
      printf '%s' "$QUTE_URL"
      ;;
    localhost:[0-9]*)
      # Handle localhost URLs by prepending the protocol
      printf 'http://%s' "$1"
      ;;
    :[0-9]*)
      # Handle port numbers by prepending the localhost
      printf 'http://localhost%s' "$1"
      ;;
    *://*)
      # Already a full URL, just return it
      printf '%s' "$1"
      ;;
    *)
      return 1
      ;;
  esac
}

main() {
  if test "$1" != "--skip-check"; then
    if test -z "$QUTE_FIFO"; then
      error "QUTE_FIFO is not set. Please set it to the path of the qute browser FIFO."
      exit 0
    fi

    if ! test -p "$QUTE_FIFO"; then
      error "QUTE_FIFO does not point to a valid FIFO. Please check the path."
      exit 0
    fi
  else
    shift
  fi

  local dir
  dir="horizontal"
  local pane1
  pane1="$QUTE_URL"
  local pane2
  pane2="$QUTE_URL"

  if test "$1" = "-h" -o "$1" = "--horizontal"; then
    dir="horizontal"
    shift
  elif test "$1" = "-v" -o "$1" = "--vertical"; then
    dir="vertical"
    shift
  fi

  if test -n "$1"; then
    pane1="$(expand_url "$1")"
    if test "$?" -ne 0; then
      error "Invalid URL format: $1"
      exit 0
    fi
    shift
  fi
  if test -n "$1"; then
    pane2="$(expand_url "$1")"
    if test "$?" -ne 0; then
      error "Invalid URL format: $1"
      exit 0
    fi
    shift
  fi

  print "$pane1 | $pane2"
  split "$dir" "$pane1" "$pane2" "$pane1 | $pane2"
}

main "$@"
